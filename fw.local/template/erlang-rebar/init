#! /bin/sh

#---------------------------------------------------------------------
#                                init                                 
# 
# This is called by the template init method, which is itself called
# by fw-init when a project is being initialized.  It is intended
# for creating files in the project that will remain in the project
# and are owned by the project.  Creation of (symlinks to) files
# owned by the build method should be done at bootstrap time.
#---------------------------------------------------------------------

#---------------------------------------------------------------------
#                           chicken and egg                           
#---------------------------------------------------------------------

which perl >/dev/null 2>/dev/null || {
  echo "erlang-rebar/init: fatal: can't locate perl" 1>&2
  exit 1
}

if test -z "${FW_ROOT}"
  then
    FW_ROOT=`echo "$0" | perl -pe 's%fw/template/erlang-rebar/init$%%;'`
    export FW_ROOT
  fi

test -f "${FW_ROOT}/share/fw/sh/fw-find.sh" || {
  echo "erlang-rebar/init: fatal: can't determine FW_ROOT" 1>&2
  echo "erlang-rebar/init: please set the environment variable" 1>&2
  exit 1
}

. "${FW_ROOT}/share/fw/sh/fw-find.sh"

#---------------------------------------------------------------------
#                              routines                               
#---------------------------------------------------------------------

fw_source "erlang-rebar/init" "sh/fatal.sh"
fw_source "erlang-rebar/init" "sh/fw-exec.sh"
fw_source "erlang-rebar/init" "sh/parse-args.sh"
fw_source "erlang-rebar/init" "sh/validate-args.sh"

#---------------------------------------------------------------------
#                                main                                 
#---------------------------------------------------------------------

fw_exec "build/automake/init" "$@" || fatal "erlang-rebar/init"

parse_args "erlang-rebar/init" "$@"

validate_args "erlang-rebar/init" "" ""

if test -n "${wrap_git_path}" ; then
  # derive a name from the path as a default
  git_name="`echo "${wrap_git_path}" | perl -ne 'print $3 if m#(git|http|https)(://|@).*/([^/.]*).git#'`-origin"
  wrap_git_name=${wrap_git_name:-$git_name}
fi

if test -z "${wrap_git_path}" ; then
  for dir in .
    do
      for x in rebar.config rebar.config.script
        do
          fw_find "template/erlang-rebar/$dir/$x" file
          test -z "$file" && fatal "erlang-rebar/init"
          cp -f "$file" "$dir" || fatal "erlang-rebar/init"
          chmod +w "$dir/$x" || fatal "erlang-rebar/init"
          fw_exec "revision/$revision/add-files" $x
        done
    done

  for dir in src
    do
      mkdir "$dir" || fatal "erlang-rebar/init"
      fw_exec "revision/$revision/add-dir" "$dir" || fatal "erlang-rebar/init"

      for x in myapp.erl
        do
          fw_find "template/erlang-rebar/$dir/$x" file
          test -z "$file" || {
            cp -f "$file" "$dir" || fatal "erlang-rebar/init"
            chmod +w "$dir/$x" || fatal "erlang-rebar/init"
          }
        done
      (
        cd "$dir" &&                                              \
        fw_exec "revision/$revision/add-files"                    \
        myapp.erl
      ) || fatal "erlang-rebar/init"
    done

  for dir in include
    do
      mkdir "$dir" || fatal "erlang-rebar/init"
      fw_exec "revision/$revision/add-dir" "$dir" || fatal "erlang-rebar/init"

      for x in myapp.hrl
        do
          fw_find "template/erlang-rebar/$dir/$x" file
          test -z "$file" || {
            cp -f "$file" "$dir" || fatal "erlang-rebar/init"
            chmod +w "$dir/$x" || fatal "erlang-rebar/init"
          }
        done
      (
        cd "$dir" &&                                              \
        fw_exec "revision/$revision/add-files"                    \
        myapp.hrl
      ) || fatal "erlang-rebar/init"
    done
else
  fw_exec "revision/$revision/ignore-files" \
    "${wrap_git_name}" \
    c_src \
    ebin \
    include \
    priv \
    src \
    "test" \
    "rebar.config" \
    "rebar.config.script" \
  || fatal "erlang-rebar/init"

  # disable dialyzer and eunit for thirdparty packages
  ( cat <<'EOD' >> configure.ac.local

dnl Disable dialyzer as it's often broken for thirdparty projects
NO_DIALYZE=1
dnl Disable eunit as it's often broken for thirdparty projects
NO_EUNIT=1
EOD
  ) || fatal "erlang-rebar/init"
  # re-add some files so that they don't show up as unstaged in git
  fw_exec "revision/$revision/add-files" configure.ac.local .gitignore
fi

fw_exec "revision/$revision/ignore-files" \
  rebar \
  .rebar \
  .dialyzer_ok \
  .generated_app_file \
  .eunit

(
  cd fw-pkgin &&
  cat <<'EOD' >> config

# uncomment and set manually if you want the application name to be different
# from FW_PACKAGE_NAME, application name must consist of characters [a-zA-Z_]
# FW_ERL_APP_NAME=""

# uncomment and set manually if autodetection of modules is incorrect.
# should be an erlang expression which evaluates to a list.
# FW_ERL_APP_MODULES="[]"

# uncomment and set manually if autodetection of registered processes is incorrect
# should be an erlang expression which evaluates to a list.
# FW_ERL_APP_REGISTERED="[]"

# uncomment and set manually if autodetection of start module is incorrect
# should be an erlang expression which evaluates to an atom.
# FW_ERL_APP_START_MODULE=""

# uncomment to define start args to the start module.  should be an erlang
# expression which evaluates to a list.  this only has an effect if
# FW_ERL_APP_START_MODULE is set manually.
# FW_ERL_APP_START_ARGS="[]"

# uncomment if the module line being generated is incorrect and you want 
# to override it.
# FW_ERL_APP_MOD_LINE="{ mod, { $FW_ERL_APP_START_MODULE, $FW_ERL_APP_START_ARGS } }"

# uncomment to define the application environment variables. should be an 
# erlang expression which evaluates to a list.
# FW_ERL_APP_ENVIRONMENT="[]"

# uncomment to indicate additional OTP applications (besides kernel and stdlib)
# that this application depends upon.  should be an erlang expression which 
# evaluates to a list.
# FW_ERL_PREREQ_APPLICATIONS_EXTRA="[]"

# uncomment to add arbitrary extra content to the app file, e.g., an
# included application directive.  should be an erlang expression which 
# evaluates to a proplist (list of key-value tuple pairs).
# FW_ERL_APP_EXTRA="[]"

# uncomment and set to specify additional pkg-config packages on the Requires:
# line of the generated .pc file
# FW_PKGCONFIG_REQUIRES_EXTRA=""

# uncomment and set to specify additional content for the Libs:
# line of the generated .pc file
# FW_PKGCONFIG_LIBS_EXTRA=""

# uncomment and set to specify additional content for the Cflags:
# line of the generated .pc file
# FW_PKGCONFIG_CFLAGS_EXTRA=""

# uncomment and set to add arbitrary additional content to the.
# generated .pc file
# FW_PKGCONFIG_EXTRA=""
EOD

if test -n "${wrap_git_path}" ; then
  echo "" >> config
  echo "# upstream git repo to package via framewerk" >> config
  echo "FW_WRAP_GITPATH=\"${wrap_git_path}\"" >> config
  echo "" >> config
  echo "# local name for git repo clone" >> config
  echo "FW_WRAP_GITNAME=\"${wrap_git_name}\"" >> config
  echo "" >> config
  echo "# git tag to checkout" >> config
  echo "FW_WRAP_GITTAG=\"${wrap_git_tag}\"" >> config
fi

# if there is a tag it's probably got a version of either 
if test -n "${wrap_git_tag}" ; then
  # enforce a version made up of digits and dots with an optional v at the
  # front
  version="`echo "${wrap_git_tag}" | perl -ne 'print $1 if m#^v?([0-9\.]+)$#'`"

  # if it's a valid version, use it as the framewerk version, otherwise
  # just default to 0.0.0
  if test -n "${version}" ; then
    sed -i \
      "s/FW_PACKAGE_VERSION=\"0.0.0\"/FW_PACKAGE_VERSION=\"${version}\"/" \
      config
  fi
fi

# if '--with_build_prefix 1' is a query arg to fw-init, add the magic to setup
# the BUILD_PREFIX variable
if test -n "${with_build_prefix}" ; then
  sed -i \
    "s/FW_PACKAGE_NAME=\"/ERLANG_VERSION=\$(erl -eval 'io:format(\"~s\", [ erlang:system_info(otp_release) ]), halt().'  -noshell)\nBUILD_PREFIX=erlang-\$(perl -e '\$ARGV[0] =~ m\/^(R?\\\d+[A-Z]*)\/i and print lc(\$1) or die \"\$ARGV[0]\";' \"\$ERLANG_VERSION\")-\n\nFW_PACKAGE_NAME=\"\${BUILD_PREFIX}/; s/# FW_ERL_APP_NAME=\"\"/FW_ERL_APP_NAME=\"$name\"/" \
    config
fi

# if '--with_deps "dep1,dep2"' is a query arg to fw-init, add those to the
# runtime dependency list
if test -n "${with_deps}" ; then
  if test -n "${with_build_prefix}" ; then
    out_deps=`echo "$with_deps" | perl -pe 's/\s//g; s/^/\\\${BUILD_PREFIX}/; s/,/,\\\${BUILD_PREFIX}/g'`
    with_deps=${out_deps}
  fi
  sed -i \
    "s/FW_PACKAGE_DEPENDS=\"\"/FW_PACKAGE_DEPENDS=\"$with_deps\"/" \
    config
fi

# if '--with_build_deps "dep1,dep2"' is a query arg to fw-init, add those to
# the runtime dependency list
if test -n "${with_build_deps}" ; then
  if test -n "${with_build_prefix}" ; then
    out_deps=`echo "$with_build_deps" | perl -pe 's/\s//g; s/^/\\\${BUILD_PREFIX}/; s/,/,\\\${BUILD_PREFIX}/g'`
    with_build_deps=${out_deps}
  fi
  sed -i \
    "s/FW_PACKAGE_BUILD_DEPENDS=\"\"/FW_PACKAGE_BUILD_DEPENDS=\"$with_deps\"/" \
    config
fi

# add back files which may have changed
fw_exec "revision/$revision/add-files" config .gitignore
) || fatal "erlang-rebar/init"


